
      </section>
          
      <section id="formArea"> 
                 <section id="objContainer">
              <label>{{details.1.aboveProducts}}</label><br>
          </section>         
      </section>
      
<!--           <article class="submitStyle" id="continueBTN" onclick="goToRating()">Continue</article>
 --> </section>  
</body>
</html>

<script>



var lastScore;
var questionNum;
var question = {
  user_id:"",
  products:[],
  title:"",
  answer:"",
  numOfProducts:0
};

var sessionID;

var noMoneyDialog = document.getElementById('noMoneyDialog');
document.getElementById('noMoneyBTN').onclick = function() {
  noMoneyDialog.close();
}

function notEnoughMoney() {
  noMoneyDialog.showModal();
}

var priceLowDialog = document.getElementById('priceLowDialog');
document.getElementById('priceLowBTN').onclick = function() {
  priceLowDialog.close();
}

function priceLow() {
  priceLowDialog.showModal();
}

var maxTriesDialog = document.getElementById('maxTriesDialog');
document.getElementById('maxTriesBTN').onclick = function() {
  maxTriesDialog.close();
  document.getElementById('sg_NextButton').click();
}

function maxTries() {
  maxTriesDialog.showModal();
}

var continueDialog = document.getElementById('continueDialog');
document.getElementById('continueBTN').onclick = function() {
  continueDialog.close();
  goToRating();
}

function continueOpen() {
  continueDialog.showModal();
}



function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

// window.onload = function() {
//   if (typeof(Storage) != "undefined") {
          
//         if (sessionStorage.getItem("wallet") === null) {
//             sessionStorage.setItem("wallet", {{details.1.starting_wallet}});
//         }
//         document.getElementById("wallet").innerHTML = sessionStorage.getItem("wallet");

//         if (sessionStorage.getItem("iteration") === null) {
//             sessionStorage.setItem("iteration", "{{iteration_id}}");
//         }

//         if (sessionStorage.getItem("name") === null) {
//             sessionStorage.setItem("name", "{{name}}");
//         }

//         if (sessionStorage.getItem("score") === null) {
//             sessionStorage.setItem("score", 0);
//         }


//         if (sessionStorage.getItem("questionNumber") === null) {
//             sessionStorage.setItem("questionNumber", 0);
//         }


//         var tempSessionID = getParameterByName('sg_sessionid');
//         if(tempSessionID !== "") {
//           if (sessionStorage.getItem("sessionID") === null) {
//             sessionStorage.setItem("sessionID", tempSessionID);
//             sessionID = sessionStorage.getItem("sessionID");
//           }
//         }

//     } else {
//         document.getElementById("wallet").innerHTML = "Sorry, your browser does not support Web Storage...";
//     }

//   try {
//     var id = document.getElementsByClassName("sg-type-script")[0].innerText;
//     document.getElementsByClassName("sg-type-script")[0].style.visibility = "hidden";
//     //var score = document.getElementsByClassName("sg-question-options")[0].innerText;
//     var score = 0;
//     var numberPattern = /\d+/g;

//     if (score) {
//       lastScore = score;
//     }
//     else if(score == null) {
//       lastScore = 0;
//     }
//     sessionStorage.setItem("score", lastScore);
//     document.getElementById("score").innerHTML = sessionStorage.getItem("score");
    

//     //Getting Question Number
//     questionNum = document.getElementsByClassName("sg-question-number")[0].innerText;
//     questionNum = (questionNum).replace(/[^0-9]/g, '');

//       if (questionNum != null) {
//         if (sessionStorage.getItem("question"+questionNum) === null) {
//             var title = document.getElementsByClassName("sg-question-title")[0].innerText;
//             question[title] = title;
//             sessionStorage.setItem("question"+questionNum, question);
//         }
//       }

//   } 
//   catch(err) {
//     //Getting Question Number
//     questionNum = document.getElementsByClassName("sg-question-number")[0].innerText;
//     questionNum = (questionNum).replace(/[^0-9]/g, '');
//     console.log(questionNum);
//     if (questionNum == "")
//     {
//       questionNum = document.getElementsByClassName("sg-question-number")[1];
//       if (questionNum != null)
//       {
//         questionNum = questionNum.innerText;
//         questionNum = (questionNum).replace(/[^0-9]/g, '');
//       }
//       document.getElementById("continueBTN").style.display = "block";
//     }

//     if (questionNum != null) {
//     if (sessionStorage.getItem("question"+questionNum) === null) {
//         var title;
//         if (questionNum == 1) title = document.getElementsByClassName("sg-question-title")[0].innerText;
//         if(questionNum > 1) title = document.getElementsByClassName("sg-question-title")[0].innerText;

//         if(questionNum.length == 1)
//         {
//           title = title.substring(3, title.length);
//         }

//         if(questionNum.length == 2)
//         {
//           title = title.substring(4, title.length);
//         }


//         question["title"] = title;
//         sessionStorage.setItem("question"+questionNum, JSON.stringify(question));
//     }
//   }
    

//     if(questionNum > 1)
//     {
//       // var score = document.getElementsByClassName("sg-question-options")[0].innerText;
//       // document.getElementsByClassName("sg-question-options")[0].style.visibility = "hidden";
//       // var numberPattern = /\d+/g;
//       //score = score.match(numberPattern);

//       var score = 0;
//         if (score) {
//           lastScore = score;
//         }
//         else if(score == null) {
//           if (lastScore == null) lastScore = 0;
//         }

//       sessionStorage.setItem("questionNumber", JSON.parse(sessionStorage.getItem("questionNumber"))+1);
//     }

//     if (questionNum == 1)
//     {
//       lastScore = 0;
//       sessionStorage.setItem("questionNumber", JSON.parse(sessionStorage.getItem("questionNumber"))+1);
//     }

//     if (questionNum == "")
//     {
//       var score = document.getElementsByClassName("sg-question-options")[0].innerText;
//       document.getElementsByClassName("sg-question-options")[0].style.visibility = "hidden";
//       lastScore = score;
//       document.getElementById("continueBTN").style.display = "block";
//     }


//     sessionStorage.setItem("score", lastScore);
//     document.getElementById("score").innerHTML = sessionStorage.getItem("score");


//   }

//   document.body.style.background = "#2A2E3E";
//   //document.getElementsByClassName("btn-default")[0].className = "";
//   document.getElementById("continueBTN").className = "submitStyle";
//   document.getElementsByClassName("sg-survey")[0].style.borderRadius = "10px";

//   showProducts();
// };

window.onload = function() {
  if (typeof(Storage) != "undefined") {
          
        if (sessionStorage.getItem("wallet") === null) {
            sessionStorage.setItem("wallet", {{details.1.starting_wallet}});
        }
        document.getElementById("wallet").innerHTML = sessionStorage.getItem("wallet");

        if (sessionStorage.getItem("iteration") === null) {
            sessionStorage.setItem("iteration", "{{iteration_id}}");
        }

        if (sessionStorage.getItem("name") === null) {
            sessionStorage.setItem("name", "{{name}}");
        }

        if (sessionStorage.getItem("score") === null) {
            sessionStorage.setItem("score", 0);
        }


        if (sessionStorage.getItem("questionNumber") === null) {
            sessionStorage.setItem("questionNumber", 0);
        }


        var tempSessionID = getParameterByName('sg_sessionid');
        if(tempSessionID !== "") {
          if (sessionStorage.getItem("sessionID") === null) {
            sessionStorage.setItem("sessionID", tempSessionID);
            sessionID = sessionStorage.getItem("sessionID");
          }
        }

    } else {
        document.getElementById("wallet").innerHTML = "Sorry, your browser does not support Web Storage...";
    }

  try {
    var id = document.getElementsByClassName("sg-type-script")[0].innerText;
    document.getElementsByClassName("sg-type-script")[0].style.visibility = "hidden";
    var score = document.getElementsByClassName("sg-question-options")[0].innerText;
    //var score = 0;
    var numberPattern = /\d+/g;

    if (score) {
      lastScore = score;
    }
    else if(score == null) {
      lastScore = 0;
    }
    sessionStorage.setItem("score", lastScore);
    document.getElementById("score").innerHTML = sessionStorage.getItem("score");
    

    //Getting Question Number
    questionNum = document.getElementsByClassName("sg-question-number")[0].innerText;
    questionNum = (questionNum).replace(/[^0-9]/g, '');

      if (questionNum != null) {
        if (sessionStorage.getItem("question"+questionNum) === null) {
            var title = document.getElementsByClassName("sg-question-title")[0].innerText;
            question[title] = title;
            sessionStorage.setItem("question"+questionNum, question);
        }
      }

  } 
  catch(err) {
    //Getting Question Number
    questionNum = document.getElementsByClassName("sg-question-number")[0].innerText;
    questionNum = (questionNum).replace(/[^0-9]/g, '');
    console.log(questionNum);
    if (questionNum == "")
    {
      questionNum = document.getElementsByClassName("sg-question-number")[1];
      if (questionNum != null)
      {
        questionNum = questionNum.innerText;
        questionNum = (questionNum).replace(/[^0-9]/g, '');
      }
      //document.getElementById("continueBTN").style.display = "block";
      //continueOpen();
    }

    if (questionNum != null) {
      if (sessionStorage.getItem("question"+questionNum) === null) {
          var title;
          if (questionNum == 1) title = document.getElementsByClassName("sg-question-title")[0].innerText;
          if(questionNum > 1) title = document.getElementsByClassName("sg-question-title")[1].innerText;

          if(questionNum.length == 1)
          {
            title = title.substring(3, title.length);
          }

          if(questionNum.length == 2)
          {
            title = title.substring(4, title.length);
          }


          question["title"] = title;
          sessionStorage.setItem("question"+questionNum, JSON.stringify(question));
      }
    }
    

    if(questionNum > 1)
    {
      var score = document.getElementsByClassName("sg-question-options")[0].innerText;
      document.getElementsByClassName("sg-question-options")[0].style.visibility = "hidden";
      // var numberPattern = /\d+/g;
      //score = score.match(numberPattern);

      //var score = 0;
        if (score) {
          lastScore = score;
        }
        else if(score == null) {
          if (lastScore == null) lastScore = 0;
        }

      sessionStorage.setItem("questionNumber", JSON.parse(sessionStorage.getItem("questionNumber"))+1);
    }

    if (questionNum == 1)
    {
      lastScore = 0;
      sessionStorage.setItem("questionNumber", JSON.parse(sessionStorage.getItem("questionNumber"))+1);
    }

    if (questionNum == "")
    {
      var score = document.getElementsByClassName("sg-question-options")[0].innerText;
      document.getElementsByClassName("sg-question-options")[0].style.visibility = "hidden";
      lastScore = score;
      continueOpen();
    }


    sessionStorage.setItem("score", lastScore);
    document.getElementById("score").innerHTML = sessionStorage.getItem("score");


  }

  document.body.style.background = "#2A2E3E";
  //document.getElementsByClassName("btn-default")[0].className = "";
  //document.getElementById("continueBTN").className = "submitStyle";
  document.getElementsByClassName("sg-survey")[0].style.borderRadius = "10px";

  showProducts();
};


//Adding products to session storage + page           
function showProducts(){

  var container = document.getElementById('objContainer');
  {{#each details}}
      
      if (sessionStorage.getItem("product"+{{product_id}}) === null) {
        var temp = {
          product_id: {{product_id}},
          name: "{{name}}",
          min_price: (Math.random() * ({{value}} - {{min_price}}) + {{min_price}}).toFixed(2),
          revealed_price:"",
          rating:"",
          subjective_price:[],
          paid_price:"",
          path: "{{path}}", 
          avilable: false
        };
        sessionStorage.setItem("product"+{{product_id}}, JSON.stringify(temp));
      }

    var sessionProduct = JSON.parse(sessionStorage.getItem("product"+{{product_id}}));

    var tempPrice = sessionProduct["min_price"];
    var tempActive = sessionProduct["avilable"];

    var product = document.createElement('article');

    if(tempActive == false) product.className = "product";
    else product.className = 'productBought';

    product.setAttribute("id", "product"+{{product_id}});
    var link = document.createElement('h5');

    $(product).click(function(event){
        event.preventDefault();
        paymentAlgorithm({{product_id}});
    });

    link.innerHTML = "{{name}}";

    product.appendChild(link);
    container.appendChild(product);

  if({{show_prices}})
  {
      var price = document.createElement('h3');
      price.innerText = tempPrice;
      product.appendChild(price);       
  }
  {{/each}}

}

function paymentAlgorithm(productId) {
  
  var temp = JSON.parse(sessionStorage.getItem("product"+productId));

  var path = temp["path"];
  var value = temp["min_price"];
  var productName = temp["name"];

  if(temp["avilable"] === true)
  {            
    window.open(path, '_blank');
    question["products"].push(temp);
    question["numOfProducts"]++;
    sessionStorage.setItem("question"+questionNum, JSON.stringify(question));
    return;
  }

  switch({{details.1.show_prices}})
  {
    case 1:
    {
      showPriceOnPayment(productId,path,value, productName);
      break;
    }
    case 0:
    {
      makingAPurchase (productId,path,value, productName);
      break;
    }
  }

}

//In case the "show prices" is off
function makingAPurchase (productId, path,value, productName) {
  switch ({{details.1.open_negotiation}})
  {
    case 1:
    {
        openNegPop(productId, path, productName, value);
        break;
    }
    case 0:
    {
        switch({{details.1.use_min_price}})
        {
          case 1:
          {
            useMinPriceOn(productId,path,value, productName, {{details.1.max_tries}});
            break;
          }
          case 0:
          {
            useMinPriceOff(productId,path,value, productName, {{details.1.max_tries}});
            break;
          }
        }
        break;
    }
  }
}

function goToRating(){
  window.location.href = "/rating:"+{{experimentId}};
}
</script>